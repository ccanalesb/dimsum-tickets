{"version":3,"sources":["utils/randomTreeNodes.js","components/TreeToolbar.js","components/TreeContainer.js","TreeView/customHooks/useTreeProps.js","TreeView/SingleSelect.js","../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../../src/form/TextBox/DSTextBox.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../../src/Toolbar/DSToolbar.js","../../../../../src/plugins/searchable/SearchableTreePlugin.js"],"names":["randomEntity","parentID","id","uuidv4","isGroup","random","children","randomEntities","undefined","name","type","parent","count","Array","fill","map","randomEntityNoChildren","randomEntitiesNoChildren","randomEntityMoreGroup","randomEntitiesMoreGroups","TreeToolbar","searchQuery","setSearchQuery","toggleExpandAll","withDepth","buttonType","labelText","onClick","clearable","containerProps","onSearch","value","placeholder","searchOnEnter","margin","orientation","TreeContainer","styled","div","props","offsetHeight","useTreeProps","useState","disableGroups","setDisableGroups","toggleDisableGroups","nodes","onItemClick","item","console","log","SingleSelect","ref","useRef","useEffect","current","actions","expandAll","checked","onChange","data","fluid","instanceRef","groupIcon","isSingleSelect","itemIcon","plugins","SelectablePluginTree","SearchableTreePlugin","showChildrenAmount","createIcon","paths","height","width","WrappedComponent","Searchable","debounce","React","this","onKeyUp","key","e","property","clearOnSearch","setState","query","target","rest","buttonRef","prevPropValue","nextProps","PropTypes","string","DSTextBox","autoFocus","disabled","maxLength","minLength","fluidWidth","hasError","readOnly","innerRef","min","max","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","extraProps","component","cloneElement","className","SearchBoxImpl","disableButton","showIcon","style","onBlur","icon","iconSize","bool","withSearchable","DSSearchBox","searchIcon","ToolbarContainer","alignment","size","DSToolbar","autoFocusOnMount","containerRef","getContainer","keyBindings","Tab","classProps","mergeRefs","decorateToolbarChildren","transformRecords","records","instance","list","record","transformRecord","getItemLabel","currRecord","markParentsAsChildMatch","itemRenderer","itemProps","autoEscape","highlightClassName","searchWords","textToHighlight","createInstancePlugin","prevSearchQuery","usePrevious","shouldWalkChildren"],"mappings":"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","file":"static/js/33.4a447a7e.chunk.js","sourcesContent":["import { random } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const randomEntity = (parentID) => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 1;\n  const children = isGroup\n    ? randomEntities(random(0, 5), id)\n    : undefined;\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    parent: parentID,\n    children,\n  };\n};\nexport const randomEntities = (count, parentID) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntity(parentID);\n  });\n\n/** With increased chances of getting no children group */\nexport const randomEntityNoChildren = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 2;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting no children groups */\nexport const randomEntitiesNoChildren = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityNoChildren();\n  });\n\n/** With increased chances of getting a group */\nexport const randomEntityMoreGroup = () => {\n  const id = uuidv4();\n  const isGroup = random(0, 4) < 3;\n  let children = isGroup\n    ? randomEntities(random(0, 2), id)\n    : undefined;\n  if (random(0, 4) < 2) children = [];\n  return {\n    id,\n    name: `${random(0, 1) > 0 ? 'John Doe' : 'Jon Snow'} ${id}`,\n    type: isGroup ? 'group' : 'single',\n    children,\n    isGroup,\n  };\n};\n/** With increased chances of getting more groups */\nexport const randomEntitiesMoreGroups = (count) =>\n  new Array(count).fill(0).map(() => {\n    return randomEntityMoreGroup();\n  });\n","import React from 'react';\nimport SearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nexport const TreeToolbar = ({\n  searchQuery,\n  setSearchQuery,\n  toggleExpandAll,\n}) => {\n  return (\n    <>\n      <DSToolbar withDepth={false}>\n        {toggleExpandAll && (\n          <DSButton\n            buttonType=\"secondary\"\n            labelText=\"Toggle Expand\"\n            onClick={toggleExpandAll}\n          />\n        )}\n        <SearchBox\n          clearable\n          containerProps={{ 'data-testid': 'tree-searchbox' }}\n          onSearch={({ value }) => setSearchQuery(value)}\n          placeholder=\"Search all\"\n          searchOnEnter={false}\n          value={searchQuery}\n        />\n      </DSToolbar>\n      <DSSeparator\n        margin=\"none\"\n        orientation=\"horizontal\"\n        type=\"non-form\"\n      />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\n/** Fixes tree height issue */\nexport const TreeContainer = styled.div`\n  height: calc(100% - ${(props) => props.offsetHeight || 80}px);\n`;\n","import { useState } from 'react';\n\nexport const useTreeProps = () => {\n  const [disableGroups, setDisableGroups] = useState(false);\n  const toggleDisableGroups = () => setDisableGroups(!disableGroups);\n  return { disableGroups, toggleDisableGroups };\n};\n","import React, { useState, useRef, useEffect } from 'react';\nimport {\n  TreeView,\n  SelectablePluginTree,\n  SearchableTreePlugin,\n  // TreeDndPlugin,\n  // TreeToolbarPlugin\n} from '@elliemae/ds-treeview';\nimport Folder from '@elliemae/ds-icons/Folder';\nimport FilePdf from '@elliemae/ds-icons/FilePdf';\nimport DSCheckbox from '@elliemae/ds-basic/form/Checkbox';\nimport { TreeToolbar } from '../components/TreeToolbar';\nimport { TreeContainer } from '../components/TreeContainer';\nimport { randomEntitiesNoChildren } from '../utils/randomTreeNodes';\nimport { useTreeProps } from './customHooks/useTreeProps';\n// import { TooltipTextProvider } from \"@elliemae/ds-basic/TruncatedTooltipText\";\n// import renderToolbar from \"./renderToolbar\";\n\nconst nodes = randomEntitiesNoChildren(1000);\n\nconst onItemClick = (item) => {\n  console.log(111, item);\n};\n\nconst SingleSelect = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const { disableGroups, toggleDisableGroups } = useTreeProps();\n\n  const ref = useRef(null);\n\n  const expandAll = () => {\n    const toggleExpandAll = ref.current.actions.toggleExpandAll;\n    console.log('REF', ref.current);\n    if (toggleExpandAll) toggleExpandAll();\n  };\n\n  useEffect(() => {\n    expandAll();\n  }, []);\n\n  return (\n    <TreeContainer>\n      <DSCheckbox\n        checked={disableGroups}\n        labelText=\"Disable Groups\"\n        onChange={toggleDisableGroups}\n      />\n      <TreeToolbar\n        searchQuery={searchQuery}\n        setSearchQuery={setSearchQuery}\n      />\n      <TreeView\n        data={nodes}\n        fluid\n        instanceRef={ref}\n        groupIcon={<Folder />}\n        isSingleSelect\n        itemIcon={<FilePdf />}\n        disableGroups={disableGroups}\n        // labelRenderer={value => value}\n        // onOrderChange={setData}\n        onItemClick={onItemClick}\n        plugins={[SelectablePluginTree, SearchableTreePlugin]}\n        // renderToolbar={renderToolbar}\n        searchQuery={searchQuery}\n        showChildrenAmount\n        // sortable\n        // width={400}\n      />\n    </TreeContainer>\n  );\n};\n\nexport default SingleSelect;\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport withSearchable from './withSearchable';\n\nconst SearchBoxImpl = ({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  onBlur,\n  readOnly,\n  value,\n  clearable,\n}) => (\n  <DSTextBox\n    className={className}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    innerRef={innerRef}\n    onChange={onChange}\n    onKeyUp={onKeyUp}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    rightComponent={\n      showIcon && (\n        <DSButton\n          disabled={disabled || disableButton}\n          buttonType=\"text\"\n          icon={<Search />}\n          iconSize=\"s\"\n          onClick={onSearch}\n        />\n      )\n    }\n    style={style}\n    value={value}\n  />\n);\n\nSearchBoxImpl.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  style: PropTypes.objectOf(PropTypes.string),\n  placeholder: PropTypes.string,\n  onKeyUp: PropTypes.func,\n  onSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  showIcon: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  clearable: PropTypes.bool,\n};\n\nexport default withSearchable(SearchBoxImpl);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  onBlur = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchIcon={searchIcon}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Allows a function that is triggered on change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Function that is triggered on blur\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Disables the search input and button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables the search button\n   */\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n","import createInstancePlugin from '@elliemae/ds-shared/createDataInstance/createInstancePlugin';\nimport Highlighter from 'react-highlight-words';\nimport React from 'react';\nimport usePrevious from '@elliemae/ds-utilities/hooks/usePrevious';\n\nconst markParentsAsChildMatch = (record) => {\n  let currRecord = record;\n\n  while (currRecord.parentNode) {\n    currRecord.parentNode.childMatch = true;\n    currRecord = currRecord.parentNode;\n  }\n};\n\nfunction transformRecords(records, instance) {\n  // gets the ul with overflow: auto\n  const list = instance.getListRef()?.current?.parentElement;\n  const {\n    props: { searchQuery },\n  } = instance.getInstance();\n  if (!searchQuery) return records;\n  // Scroll the list to the top once the search is triggered\n  list?.scrollTo(0, 0);\n  return records.filter((record) => record.selfMatch || record.childMatch);\n}\ntransformRecords.order = 0;\n\nfunction transformRecord(record, instance) {\n  const {\n    props: { searchQuery },\n    getItemLabel,\n  } = instance.getInstance();\n  if (\n    searchQuery &&\n    getItemLabel(record).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1\n  ) {\n    markParentsAsChildMatch(record);\n    // eslint-disable-next-line no-param-reassign\n    record.selfMatch = true;\n  }\n  return record;\n}\ntransformRecord.order = 0;\n\nconst itemRenderer = (value, itemProps, instance) => {\n  const {\n    props: { searchQuery, showHighlight = true },\n  } = instance.getInstance();\n  if (!showHighlight || !searchQuery) return value;\n  return (\n    <Highlighter\n      autoEscape\n      highlightClassName=\"tree-text-highlight\"\n      searchWords={[searchQuery]}\n      textToHighlight={value}\n    />\n  );\n};\nitemRenderer.order = 0;\n\nexport const SearchableTreePlugin = createInstancePlugin('searchable-tree', {\n  instance: (instance) => {\n    const {\n      props: { searchQuery },\n    } = instance;\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const prevSearchQuery = usePrevious(searchQuery);\n    return {\n      prevSearchQuery,\n    };\n  },\n  shouldWalkChildren: (record, instance) => {\n    const {\n      props: { searchQuery },\n    } = instance.getInstance();\n    return !!searchQuery;\n  },\n  record: transformRecord,\n  records: transformRecords,\n  itemRenderer,\n});\n"],"sourceRoot":""}