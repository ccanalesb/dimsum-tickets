{"version":3,"sources":["TreeView/SearchableTreePlugin.js"],"names":["transformRecords","records","instance","list","document","querySelector","getInstance","props","searchQuery","scrollTop","filter","record","selfMatch","childMatch","transformRecord","getItemLabel","toLowerCase","indexOf","currRecord","parentNode","markParentsAsChildMatch","order","itemRenderer","value","itemProps","showHighlight","autoEscape","highlightClassName","searchWords","textToHighlight","SearchableTreePlugin","createInstancePlugin","prevSearchQuery","usePrevious","shouldWalkChildren"],"mappings":"iGAAA,mHAWA,SAASA,EAAiBC,EAASC,GACjC,IAAMC,EAAOC,SAASC,cAAc,6BAIpC,OADIH,EAASI,cADXC,MAASC,aAIPL,GAAQA,EAAKM,YAAWN,EAAKM,UAAY,GACtCR,EAAQS,QACb,SAACC,GAAD,OAAYA,EAAOC,WAAaD,EAAOE,eAJhBZ,EAQ3B,SAASa,EAAgBH,EAAQT,GAAW,IAAD,EAIrCA,EAASI,cAFFE,EAF8B,EAEvCD,MAASC,YACTO,EAHuC,EAGvCA,aAYF,OATEP,IAG2C,IAF3CO,EAAaJ,GACVK,cACAC,QAAQT,EAAYQ,kBA7BK,SAACL,GAE/B,IADA,IAAIO,EAAaP,EACVO,EAAWC,YAChBD,EAAWC,WAAWN,YAAa,EACnCK,EAAaA,EAAWC,WA2BxBC,CAAwBT,GAExBA,EAAOC,WAAY,GAEdD,EAhBTX,EAAiBqB,MAAQ,EAkBzBP,EAAgBO,MAAQ,EACxB,IAAMC,EAAe,SAACC,EAAOC,EAAWtB,GAAc,IAAD,EAG/CA,EAASI,cADXC,MAASC,EAFwC,EAExCA,YAFwC,IAE3BiB,cAExB,YAJmD,WAI5BjB,EAErB,kBAAC,IAAD,CACEkB,YAAU,EACVC,mBAAmB,sBACnBC,YAAa,CAACpB,GACdqB,gBAAiBN,IANsBA,GAU7CD,EAAaD,MAAQ,EACd,IAAMS,EAAuBC,YAClC,kBACA,CACE7B,SAAU,SAACA,GAAc,IAEZM,EACPN,EADFK,MAASC,YAIX,MAAO,CACLwB,gBAFsBC,YAAYzB,KAKtC0B,mBAAoB,SAACvB,EAAQT,GAI3B,QADIA,EAASI,cADXC,MAASC,aAIbG,OAAQG,EACRb,QAASD,EACTsB","file":"static/js/71.92d2626a.chunk.js","sourcesContent":["import createInstancePlugin from '@elliemae/ds-shared/createDataInstance/createInstancePlugin';\nimport Highlighter from 'react-highlight-words';\nimport React from 'react';\nimport usePrevious from '@elliemae/ds-utilities/hooks/usePrevious';\nconst markParentsAsChildMatch = (record) => {\n  let currRecord = record;\n  while (currRecord.parentNode) {\n    currRecord.parentNode.childMatch = true;\n    currRecord = currRecord.parentNode;\n  }\n};\nfunction transformRecords(records, instance) {\n  const list = document.querySelector('[data-testid=\"tree-list\"]');\n  const {\n    props: { searchQuery },\n  } = instance.getInstance();\n  if (!searchQuery) return records;\n  // Scroll the list to the top once the search is triggered\n  if (list && list.scrollTop) list.scrollTop = 0;\n  return records.filter(\n    (record) => record.selfMatch || record.childMatch,\n  );\n}\ntransformRecords.order = 0;\nfunction transformRecord(record, instance) {\n  const {\n    props: { searchQuery },\n    getItemLabel,\n  } = instance.getInstance();\n  if (\n    searchQuery &&\n    getItemLabel(record)\n      .toLowerCase()\n      .indexOf(searchQuery.toLowerCase()) !== -1\n  ) {\n    markParentsAsChildMatch(record);\n    // eslint-disable-next-line no-param-reassign\n    record.selfMatch = true;\n  }\n  return record;\n}\ntransformRecord.order = 0;\nconst itemRenderer = (value, itemProps, instance) => {\n  const {\n    props: { searchQuery, showHighlight = true },\n  } = instance.getInstance();\n  if (!showHighlight || !searchQuery) return value;\n  return (\n    <Highlighter\n      autoEscape\n      highlightClassName=\"tree-text-highlight\"\n      searchWords={[searchQuery]}\n      textToHighlight={value}\n    />\n  );\n};\nitemRenderer.order = 0;\nexport const SearchableTreePlugin = createInstancePlugin(\n  'searchable-tree',\n  {\n    instance: (instance) => {\n      const {\n        props: { searchQuery },\n      } = instance;\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      const prevSearchQuery = usePrevious(searchQuery);\n      return {\n        prevSearchQuery,\n      };\n    },\n    shouldWalkChildren: (record, instance) => {\n      const {\n        props: { searchQuery },\n      } = instance.getInstance();\n      return !!searchQuery;\n    },\n    record: transformRecord,\n    records: transformRecords,\n    itemRenderer,\n  },\n);\n"],"sourceRoot":""}