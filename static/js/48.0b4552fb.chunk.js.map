{"version":3,"sources":["DataGrid/customRenderers/ToggleCell.js","DataGrid/columns3.js","../../../../../src/form/Toggle/props.js","../../../../../src/form/Toggle/toggleHelper.js","../../../src/onClickHandlerForNonInteractiveElements.js","../../../../../src/form/Toggle/DSToggleRender.js","../../../../../src/form/Toggle/DSToggleImpl.js","../../../../../src/form/Toggle/DSToggle.js","../../../../src/Tooltip/TooltipType.js","../../../../src/Tooltip/DSTooltip.js","../../../src/constants.js"],"names":["ToggleCell","customHandlers","onToggle","rowData","metaData","entityType","activeField","id","isChecked","get","dataProps","containerProps","onChange","useCallback","event","stopPropagation","checked","defaultCol","label","property","camelCase","visible","searchable","sortable","resizable","valueTransformation","value","customRenderer","props","width","filterOptions","togglePropTypes","PropTypes","hasError","readOnly","disabled","labelOn","labelOff","size","name","string","cleanDrag","startPoint","isDragging","dragStartingPoints","circleWidth","boxWidth","drag","onClickHandler","role","tabIndex","onClick","onKeyPress","keycode","className","style","onBlur","onFocus","onMouseDown","onMouseEnter","onMouseLeave","onTouchCancel","onTouchEnd","onTouchMove","onTouchStart","dragStyle","containerRef","handRef","defaultState","convertPropToCssClassName","cssClassName","classNameBlock","classNameElement","allowChange","interactionType","title","triggerComponent","data-testid","aria-disabled","defaultChecked","defaultValue","onClickHandlerForNonInteractiveElements","ref","aria-checked","type","DSToggleImpl","move","clientX","calculateDrag","inside","isValidDrag","e","newCheck","window","React","this","prevProps","prevState","snapshot","currentCheckState","checkedProp","nodesInterval","setInterval","clearInterval","left","state","Component","DSToggle","otherProps","TooltipType","TooltipContainer","aggregatedClasses","TooltipText","DSTooltip","innerRef","placement","PopperPositions","TOP","delayClose","delayOpen","PopperInteractions","HOVER","isOpen","undefined","onOpen","springAnimationComponent","tooltipType","showArrow","zIndex","otherTooltipProps","tooltipBlockName","Content","blockName","contentComponent","getComponentFromProps","bool"],"mappings":"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","file":"static/js/48.0b4552fb.chunk.js","sourcesContent":["import React, { useCallback } from 'react';\nimport DSToggle from '@elliemae/ds-basic/form/Toggle';\nimport PropTypes from 'prop-types';\nimport { get } from 'lodash';\n\nconst ToggleCell = ({\n  customHandlers: { onToggle = () => {} },\n  metaData: { rowData },\n  entityType = 'workflow-rule',\n  activeField = 'active',\n}) => {\n  const { id } = rowData;\n  const isChecked = get(rowData, activeField);\n  const dataProps = {\n    'data-testid': `${entityType}-${activeField}-toggle`,\n    [`data-${entityType}Id`]: id,\n    containerProps: {\n      'data-testid': `${entityType}-${activeField}-toggle-container`,\n    },\n  };\n  const onChange = useCallback(\n    (event) => {\n      event.stopPropagation();\n      onToggle(rowData);\n    },\n    [onToggle, rowData],\n  );\n  return (\n    <DSToggle\n      {...dataProps}\n      checked={isChecked}\n      onChange={onChange}\n    />\n  );\n};\nToggleCell.propTypes = {\n  customHandlers: PropTypes.shape({\n    onToggle: PropTypes.func,\n  }),\n  metaData: PropTypes.shape({\n    rowData: PropTypes.object,\n  }),\n  entityType: PropTypes.string.isRequired,\n  activeField: PropTypes.string,\n  theme: PropTypes.object,\n};\n\nexport default ToggleCell;\n","import React from 'react';\nimport ToggleCell from './customRenderers/ToggleCell';\nimport { camelCase } from 'lodash';\n\nconst defaultCol = (label = 'label') => ({\n  property: camelCase(label),\n  label,\n  visible: true,\n  searchable: true,\n  sortable: true,\n  resizable: true,\n  valueTransformation: (value = '') => value,\n});\n\nexport default [\n  {\n    ...defaultCol('name'),\n  },\n  {\n    ...defaultCol('in e folder'),\n    customRenderer: (props) => (\n      <ToggleCell {...props} activeField=\"inFolderE\" />\n    ),\n    width: 64,\n    filterOptions: [\n      { id: 'true', label: 'Active' },\n      { id: 'false', label: 'Inactive' },\n    ],\n    valueTransformation: (value) => !!value,\n  },\n  {\n    ...defaultCol('salary'),\n  },\n  {\n    ...defaultCol('monthly'),\n  },\n];\n","import PropTypes from 'prop-types';\nimport { sizes } from '../../utils/prop-types';\n\nexport const togglePropTypes = {\n  /**\n   * Set of Properties attached to the main container\n   */\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the toggle has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the toggle is read only or not\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether the toggle is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Whether the toggle is checked or not\n   */\n  checked: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once the toggle changes\n   */\n  onChange: PropTypes.func,\n  /**\n   * Label to show when the toggle is ON\n   */\n  labelOn: PropTypes.string,\n  /**\n   * Label to show when the toggle is OFF\n   */\n  labelOff: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * ['s', 'm', 'l']\n   */\n  size: PropTypes.oneOf(sizes),\n  /**\n   * Input name\n   */\n  name: PropTypes.string,\n};\n","export const isValidDrag = ({\n  inside,\n  circleWidth,\n  drag,\n  checked,\n  boxWidth,\n}) => {\n  const difference = boxWidth - circleWidth;\n  return checked\n    ? !inside && -drag > difference / 2\n    : !inside && drag > boxWidth / 3;\n};\n\nexport const cleanDrag = () => ({\n  startPoint: null,\n  isDragging: false,\n});\n\nexport const calculateDrag = (\n  clientX,\n  { startPoint, checked, isDragging, boxWidth, circleWidth },\n) => {\n  if (!isDragging) return null;\n  const move = startPoint - clientX;\n  const drag = !checked ? clientX - startPoint : boxWidth - circleWidth - move;\n  if (!checked && clientX > 0 && clientX > startPoint && drag < boxWidth * 0.7)\n    return drag;\n  if (checked && clientX > 0 && clientX < startPoint && move < boxWidth * 0.7)\n    return drag;\n  return null;\n};\n\nexport const dragStartingPoints = checked => ({ circleWidth, boxWidth }) => {\n  if (checked) return { drag: boxWidth - circleWidth };\n  return {\n    drag: 0,\n  };\n};\n","/**\n * onClickHandler: callback\n *\n * @param onClickHandler\n */\nexport default onClickHandler => ({\n  role: 'button',\n  tabIndex: '0',\n  onClick: onClickHandler,\n  onKeyPress: event => {\n    event.stopPropagation();\n    const { keycode, key } = event;\n    if (key === 'Enter') onClickHandler(event);\n    else if (keycode === 13) onClickHandler(event);\n  },\n});\n","/* eslint-disable react/prop-types */\n/* eslint-disable complexity */\nimport React from 'react';\nimport onClickHandlerForNonInteractiveElements from '@elliemae/ds-utilities/onClickHandlerForNonInteractiveElements';\nimport { convertPropToCssClassName } from '@elliemae/ds-classnames';\nimport DSTooltip from '@elliemae/ds-basic/Tooltip';\n\nconst DSToggleRender = ({\n  containerProps,\n  id,\n  className = '',\n  style = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = false,\n  onBlur = () => null,\n  onFocus = () => null,\n  onChange = () => null,\n  onMouseDown = () => null,\n  onMouseEnter = () => null,\n  onMouseLeave = () => null,\n  onTouchCancel = () => null,\n  onTouchEnd = () => null,\n  onTouchMove = () => null,\n  onTouchStart = () => null,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  dragStyle = {},\n  containerRef = null,\n  handRef = null,\n  name = '',\n  value = '',\n  size = 's',\n  defaultState,\n}) => {\n  const {\n    cssClassName,\n    classNameBlock,\n    classNameElement,\n  } = convertPropToCssClassName('form-element-toggle', className, {\n    hasError,\n    readOnly,\n    disabled,\n    checked,\n    id,\n    size,\n  });\n  const allowChange = disabled || readOnly;\n\n  let label = checked ? (\n    <div className={classNameElement('icon-on')}>{labelOn}</div>\n  ) : (\n    <div className={classNameElement('icon-off')}>{labelOff}</div>\n  );\n\n  if (readOnly) {\n    label = (\n      <DSTooltip\n        interactionType=\"hover\"\n        title=\"Read Only\"\n        triggerComponent={label}\n      />\n    );\n  }\n\n  return (\n    <div\n      {...containerProps}\n      data-testid=\"em-ds-toggle\"\n      aria-disabled={disabled}\n      defaultChecked={checked}\n      defaultValue={value}\n      {...onClickHandlerForNonInteractiveElements(\n        allowChange ? null : onChange,\n      )}\n      ref={containerRef}\n      className={`${cssClassName} ${\n        defaultState ? 'default-state-checked' : ''\n      }`}\n      onBlur={onBlur}\n      onFocus={onFocus}\n      // eslint-disable-next-line jsx-a11y/role-has-required-aria-props\n      aria-checked={checked}\n      role=\"checkbox\"\n      tabIndex={0}\n    >\n      <div className={classNameBlock('box')}>{label}</div>\n      <div\n        ref={handRef}\n        aria-checked={checked}\n        aria-disabled={disabled}\n        className={`${classNameElement('input')} ${\n          defaultState ? 'default-state-checked' : ''\n        }`}\n        onMouseDown={allowChange ? null : onMouseDown}\n        onMouseEnter={allowChange ? null : onMouseEnter}\n        onMouseLeave={allowChange ? null : onMouseLeave}\n        onTouchCancel={allowChange ? null : onTouchCancel}\n        onTouchEnd={allowChange ? null : onTouchEnd}\n        onTouchMove={allowChange ? null : onTouchMove}\n        onTouchStart={allowChange ? null : onTouchStart}\n        style={{\n          ...style,\n          ...dragStyle,\n        }}\n      />\n      <input\n        className={classNameElement('hidden-checkbox')}\n        defaultChecked={checked}\n        defaultValue={value}\n        name={name}\n        type=\"checkbox\"\n      />\n    </div>\n  );\n};\n\nexport default DSToggleRender;\n","/* eslint-disable max-lines */\nimport React, { Component } from 'react';\nimport {\n  isValidDrag,\n  cleanDrag,\n  calculateDrag,\n  dragStartingPoints,\n} from './toggleHelper';\nimport DSToggleRender from './DSToggleRender';\nimport { togglePropTypes } from './props';\n\nclass DSToggleImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checked: props.checked || false,\n      inside: false,\n      isDragging: false,\n      drag: null,\n      startPoint: null,\n      circleWidth: null,\n      boxWidth: null,\n      ...dragStartingPoints(props.checked || false),\n    };\n    this.circle = React.createRef();\n    this.box = React.createRef();\n  }\n\n  componentDidMount() {\n    this.verifyElements();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot) {\n      this.verifyElements();\n    }\n  }\n\n  /**\n   * ******************************************************\n   * Drag\n   * ****************************************************** *\n   *\n   * @param clientX\n   */\n  onDragStart = (clientX) => {\n    const {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    } = this.state;\n    // const { checked: checkedProp, } = this.props\n    const drag = calculateDrag(clientX, {\n      startPoint,\n      checked,\n      isDragging,\n      boxWidth,\n      circleWidth,\n    });\n    if (drag) this.setState({ drag });\n    // else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    else this.setDragOnChange(checked); // set initial position\n  };\n\n  onDragStop = (e) => {\n    const { checked } = this.state;\n    // const { checked: checkedProp, } = this.props\n    if (isValidDrag(this.state)) {\n      this.onChange(e);\n      this.setState(cleanDrag);\n      // } else this.setDragOnChange(checkedProp != null ? checkedProp : checked) // set initial position\n    } else this.setDragOnChange(checked); // set initial position\n  };\n\n  /**\n   * ******************************************************\n   * StandardEvents\n   * ****************************************************** *\n   *\n   * @param e\n   */\n  onBlur = (e) => {\n    const { onBlur, id } = this.props;\n    if (onBlur) onBlur(e, id);\n  };\n\n  onFocus = (e) => {\n    const { onFocus, id } = this.props;\n    if (onFocus) onFocus(e, id);\n  };\n\n  onChange = (e) => {\n    const { checked } = this.state;\n    const {\n      onChange,\n      id,\n      value,\n      // checked: checkedProp,\n    } = this.props;\n    const newCheck = !checked;\n    // this.setState({\n    //   checked: checkedProp != null ? checkedProp : newCheck,\n    // })\n    this.setState({\n      checked: newCheck,\n    });\n    e.target.value = value;\n    e.target.checked = newCheck;\n    e.checked = newCheck;\n    onChange(e, id);\n    // this.setDragOnChange(checkedProp != null ? checkedProp : newCheck) // set new position\n    this.setDragOnChange(newCheck); // set new position\n  };\n\n  /** ******************************************************\n      MouseEvents\n   ******************************************************* * */\n  onMouseEnter = () => {\n    this.setState({ inside: true });\n  };\n\n  onMouseLeave = () => {\n    this.setState({ inside: false });\n  };\n\n  onMouseMove = (event) => {\n    event.preventDefault();\n    this.onDragStart(event.clientX);\n  };\n\n  onMouseDown = (event) => {\n    this.onDragStart(event.clientX);\n    this.setState({ startPoint: event.clientX, isDragging: true });\n    window.addEventListener('mousemove', this.onMouseMove);\n    window.addEventListener('mouseup', this.onMouseUp);\n  };\n\n  onMouseUp = (event) => {\n    this.onDragStop(event);\n    window.removeEventListener('mousemove', this.onMouseMove);\n    window.removeEventListener('mouseup', this.onMouseUp);\n  };\n\n  /** ******************************************************\n      Touch\n   ******************************************************* * */\n  onTouchCancel = () => {\n    this.setState({ inside: false });\n  };\n\n  onTouchEnd = (event) => {\n    event.preventDefault();\n    this.onDragStop(event);\n  };\n\n  onTouchMove = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n  };\n\n  onTouchStart = (event) => {\n    this.onDragStart(event.touches[0].clientX);\n    this.setState({ startPoint: event.touches[0].clientX, isDragging: true });\n  };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.checked) {\n      return {\n        checked: props.checked,\n        ...dragStartingPoints(props.checked)(state),\n      };\n    }\n    return null;\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const { size } = this.props;\n    if (prevProps.size !== size) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * ******************************************************\n   * other\n   * ****************************************************** *\n   *\n   * @param currentCheckState\n   */\n  setDragOnChange(currentCheckState) {\n    this.setState(dragStartingPoints(currentCheckState));\n  }\n\n  verifyElements() {\n    const { checked } = this.state;\n    const { checked: checkedProp } = this.props;\n    const nodesInterval = setInterval(() => {\n      // !important it checks when nodes are availables\n      if (\n        !this.circle ||\n        !this.box ||\n        !this.circle.current ||\n        !this.box.current\n      )\n        return;\n      const {\n        current: { clientWidth: circleWidth },\n      } = this.circle;\n      const {\n        current: { clientWidth: boxWidth },\n      } = this.box;\n      if (!circleWidth || !boxWidth || circleWidth === boxWidth) return;\n      this.setState({\n        boxWidth,\n        circleWidth,\n      });\n      this.setDragOnChange(checkedProp != null ? checkedProp : checked);\n      // this.setDragOnChange(checked)\n      clearInterval(nodesInterval);\n    }, 5);\n  }\n\n  render() {\n    const { checked, drag, inside } = this.state;\n    const dragStyle =\n      drag !== null || checked || this.props.checked\n        ? { left: `${drag}px` }\n        : null;\n    return (\n      <DSToggleRender\n        {...this.props}\n        defaultState={this.props.checked}\n        checked={checked}\n        containerRef={this.box}\n        dragStyle={dragStyle}\n        handRef={this.circle}\n        inside={inside}\n        onBlur={this.onBlur}\n        onChange={this.onChange}\n        onFocus={this.onFocus}\n        onMouseDown={this.onMouseDown}\n        onMouseEnter={this.onMouseEnter}\n        onMouseLeave={this.onMouseLeave}\n        onTouchCancel={this.onTouchCancel}\n        onTouchEnd={this.onTouchEnd}\n        onTouchMove={this.onTouchMove}\n        onTouchStart={this.onTouchStart}\n      />\n    );\n  }\n}\n\nDSToggleImpl.propTypes = togglePropTypes;\n\nexport default DSToggleImpl;\n","import React from 'react';\nimport ToggleImpl from './DSToggleImpl';\nimport { togglePropTypes } from './props';\n\nconst DSToggle = ({\n  containerProps = {},\n  hasError = false,\n  readOnly = false,\n  disabled = false,\n  checked = undefined,\n  labelOn = 'ON',\n  labelOff = 'OFF',\n  name = '',\n  value = '',\n  size = 's',\n  ...otherProps\n}) => (\n  <ToggleImpl\n    {...otherProps}\n    checked={checked}\n    containerProps={containerProps}\n    disabled={disabled}\n    hasError={hasError}\n    labelOff={labelOff}\n    labelOn={labelOn}\n    name={name}\n    readOnly={readOnly}\n    size={size}\n    value={value}\n  />\n);\n\nDSToggle.propTypes = togglePropTypes;\n\nexport default DSToggle;\n","export const TooltipType = {\n  TOOLTIP: 'tooltip',\n  TOOLBAR: 'toolbar',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  aggregatedClasses,\n  convertPropToCssClassName,\n} from '@elliemae/ds-classnames';\nimport DSPopper, {\n  PopperPositions,\n  PopperInteractions,\n} from '@elliemae/ds-basic/Popper';\nimport getComponentFromProps from '@elliemae/ds-utilities/getComponentFromProps';\nimport {\n  DEFAULT_DELAY_OPEN,\n  DEFAULT_DELAY_CLOSE,\n} from '@elliemae/ds-shared/constants';\nimport { TooltipType } from './TooltipType';\nimport { interactions } from '../Popper/interaction';\nimport { positions } from '../Popper/positions';\n\nconst blockName = 'tooltip';\n\nconst TooltipContainer = aggregatedClasses('div')(blockName);\nconst TooltipText = aggregatedClasses('span')(blockName, 'text');\n\nconst DSTooltip = ({\n  containerProps = {},\n  innerRef,\n  placement = PopperPositions.TOP,\n  title = '',\n  delayClose = DEFAULT_DELAY_CLOSE,\n  delayOpen = DEFAULT_DELAY_OPEN,\n  interactionType = PopperInteractions.HOVER,\n  triggerComponent = null,\n  className = '',\n  isOpen = undefined,\n  onOpen = () => null,\n  springAnimationComponent = undefined,\n  tooltipType = TooltipType.TOOLTIP,\n  showArrow = true,\n  zIndex,\n  ...otherTooltipProps\n}) => {\n  const { cssClassName: tooltipBlockName } = convertPropToCssClassName(\n    blockName,\n  );\n\n  let Content = title;\n  if (typeof title === 'string') {\n    Content = <TooltipText>{title}</TooltipText>;\n  }\n\n  return (\n    <DSPopper\n      blockName={tooltipBlockName}\n      contentComponent={\n        <TooltipContainer\n          {...containerProps}\n          {...otherTooltipProps}\n          className={`tooltip-container--${tooltipType} ${className}`}\n          innerRef={innerRef}\n        >\n          {Content}\n        </TooltipContainer>\n      }\n      delayClose={delayClose}\n      delayOpen={delayOpen}\n      interactionType={interactionType}\n      isOpen={isOpen}\n      onOpen={onOpen}\n      placement={placement}\n      showArrow={tooltipType === TooltipType.TOOLTIP ? showArrow : false}\n      springAnimationComponent={springAnimationComponent}\n      triggerComponent={getComponentFromProps(triggerComponent)}\n      zIndex={zIndex}\n    />\n  );\n};\n\nDSTooltip.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Tooltip position */\n  placement: PropTypes.oneOf(positions),\n  /** Tooltip content */\n  title: PropTypes.string,\n  /** Delay to close the tooltip */\n  delayClose: PropTypes.string,\n  /** Delay to open the tooltip */\n  delayOpen: PropTypes.string,\n  /** A type indicating how to open/close the tooltip */\n  interactionType: PropTypes.oneOf(interactions),\n  /** The component that will trigger the open/close interaction */\n  triggerComponent: PropTypes.element,\n  /** Whether the tooltip is visible or not */\n  isOpen: PropTypes.bool,\n  /** Handler when the tooltip opens */\n  onOpen: PropTypes.func,\n  /** Spring animation component */\n  springAnimationComponent: PropTypes.element,\n  /** Whether to show an arrow or not */\n  showArrow: PropTypes.bool,\n};\n\nexport { TooltipType, TooltipContainer, TooltipText };\nexport default DSTooltip;\n","export const DEFAULT_DELAY_OPEN = 200;\nexport const DEFAULT_DELAY_CLOSE = 300;\nexport const sizeOptions = ['small', 'medium', 'large', 'x-large'];\n"],"sourceRoot":""}