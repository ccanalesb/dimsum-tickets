{"version":3,"sources":["components/TreeToolbar.js","../../../src/Search.js","../../../../../src/form/SearchBox/withSearchable.js","../../../../../src/form/TextBox/DSTextBox.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../../src/form/SearchBox/SearchBoxImpl.js","../../../../../src/form/SearchBox/DSSearchBox.js","../../../../src/Toolbar/DSToolbar.js"],"names":["TreeToolbar","searchQuery","setSearchQuery","toggleExpandAll","withDepth","buttonType","labelText","onClick","clearable","containerProps","onSearch","value","placeholder","searchOnEnter","margin","orientation","type","createIcon","paths","height","width","WrappedComponent","Searchable","debounce","props","React","this","onKeyUp","key","e","property","clearOnSearch","setState","query","target","onChange","rest","buttonRef","prevPropValue","nextProps","PropTypes","string","DSTextBox","autoFocus","disabled","maxLength","minLength","fluidWidth","hasError","readOnly","innerRef","min","max","leftComponent","rightComponent","required","variant","otherProps","aria-label","role","children","extraProps","component","cloneElement","className","SearchBoxImpl","disableButton","showIcon","style","onBlur","icon","iconSize","bool","withSearchable","DSSearchBox","searchIcon","ToolbarContainer","alignment","size","DSToolbar","autoFocusOnMount","containerRef","useRef","getContainer","keyBindings","Tab","classProps","mergeRefs","decorateToolbarChildren"],"mappings":"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","file":"static/js/43.16c8e7da.chunk.js","sourcesContent":["import React from 'react';\nimport SearchBox from '@elliemae/ds-basic/form/SearchBox';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSSeparator from '@elliemae/ds-basic/Separator';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nexport const TreeToolbar = ({\n  searchQuery,\n  setSearchQuery,\n  toggleExpandAll,\n}) => {\n  return (\n    <>\n      <DSToolbar withDepth={false}>\n        {toggleExpandAll && (\n          <DSButton\n            buttonType=\"secondary\"\n            labelText=\"Toggle Expand\"\n            onClick={toggleExpandAll}\n          />\n        )}\n        <SearchBox\n          clearable\n          containerProps={{ 'data-testid': 'tree-searchbox' }}\n          onSearch={({ value }) => setSearchQuery(value)}\n          placeholder=\"Search all\"\n          searchOnEnter={false}\n          value={searchQuery}\n        />\n      </DSToolbar>\n      <DSSeparator\n        margin=\"none\"\n        orientation=\"horizontal\"\n        type=\"non-form\"\n      />\n    </>\n  );\n};\n","/* eslint-disable */\nimport createIcon from './utils/createIcon';\n\nexport default createIcon({\n  paths: [\n    'M18.869 19.162l-5.943-6.484c1.339-1.401 2.075-3.233 2.075-5.178 0-2.003-.78-3.887-2.197-5.303S9.504 0 7.501 0 3.614.78 2.198 2.197.001 5.497.001 7.5s.78 3.887 2.197 5.303S5.498 15 7.501 15c1.726 0 3.362-.579 4.688-1.645l5.943 6.483a.497.497 0 0 0 .369.162.4997.4997 0 0 0 .369-.837l-.001-.001zM1 7.5C1 3.916 3.916 1 7.5 1S14 3.916 14 7.5 11.084 14 7.5 14 1 11.084 1 7.5z',\n  ],\n  height: 20,\n  width: 20,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from '@elliemae/ds-utilities/utils';\n\nconst withSearchable = (WrappedComponent) => {\n  class Searchable extends Component {\n    debouncedSearch = debounce(this.handleSearch, 200);\n\n    constructor(props) {\n      super(props);\n      this.state = {\n        value: props.value,\n      };\n      this.handleSearch = this.handleSearch.bind(this);\n      this.handleKeyUp = this.handleKeyUp.bind(this);\n      this.handleChange = this.handleChange.bind(this);\n      this.buttonRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(nextProps, { prevPropValue }) {\n      if (nextProps.value !== prevPropValue) {\n        return {\n          value: nextProps.value,\n          prevPropValue: nextProps.value,\n        };\n      }\n      return null;\n    }\n\n    handleKeyUp(e) {\n      const { onKeyUp, searchOnEnter } = this.props;\n      const { key } = e;\n      if (searchOnEnter && key === 'Enter') {\n        this.handleSearch();\n      }\n      onKeyUp(e);\n    }\n\n    handleSearch() {\n      const { onSearch, property, clearOnSearch, searchOnEnter } = this.props;\n      const { value } = this.state;\n\n      if (clearOnSearch) this.setState({ value: '' });\n      if (searchOnEnter && !value) return;\n      onSearch({\n        query: { [property]: value },\n        property,\n        value,\n      });\n    }\n\n    handleChange({ target }) {\n      const { value } = target;\n      const { searchOnEnter, onChange } = this.props;\n      onChange(value);\n      this.setState({ value }, () => {\n        if (!searchOnEnter) this.debouncedSearch();\n      });\n    }\n\n    render() {\n      const { value } = this.state;\n      const { containerProps, ...rest } = this.props;\n\n      return (\n        <WrappedComponent\n          {...rest}\n          buttonRef={this.buttonRef}\n          containerProps={containerProps}\n          onChange={this.handleChange}\n          onKeyUp={this.handleKeyUp}\n          onSearch={this.handleSearch}\n          value={value}\n        />\n      );\n    }\n  }\n\n  Searchable.defaultProps = {\n    onChange: () => null,\n    onSearch: () => null,\n    onKeyUp: () => null,\n    property: 'all',\n    searchOnEnter: true,\n    clearOnSearch: false,\n    containerProps: {},\n  };\n\n  Searchable.propTypes = {\n    containerProps: PropTypes.shape({}),\n    onChange: PropTypes.func,\n    onSearch: PropTypes.func,\n    onKeyUp: PropTypes.func,\n    property: PropTypes.string,\n    searchOnEnter: PropTypes.bool,\n    clearOnSearch: PropTypes.bool,\n    value: PropTypes.string,\n  };\n\n  return Searchable;\n};\n\nexport default withSearchable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport DSInput from '@elliemae/ds-basic/form/Input';\n\nconst DSTextBox = ({\n  containerProps = {},\n  autoFocus = false,\n  disabled = false,\n  maxLength = 255,\n  minLength = 0,\n  fluidWidth = false,\n  placeholder,\n  value = '',\n  hasError = false,\n  readOnly = false,\n  innerRef = null,\n  type = 'text',\n  min = undefined,\n  max = undefined,\n  clearable = false,\n  leftComponent = null,\n  rightComponent = null,\n  required = false,\n  variant,\n  ...otherProps\n}) => (\n  <DSInput\n    {...otherProps}\n    aria-label={otherProps['aria-label'] || 'Text Box'}\n    autoFocus={autoFocus}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    fluidWidth={fluidWidth}\n    hasError={hasError}\n    innerRef={innerRef}\n    leftComponent={leftComponent}\n    max={max}\n    maxLength={maxLength}\n    min={min}\n    minLength={minLength}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    required={required}\n    rightComponent={rightComponent}\n    role=\"textbox\"\n    type={type}\n    value={value}\n    variant={variant}\n  />\n);\n\nDSTextBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /**\n   * Whether the text box uses auto focus or not\n   */\n  autoFocus: PropTypes.bool,\n  /**\n   * Whether the text box is disabled or not\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Max length for the text box\n   */\n  maxLength: PropTypes.number,\n  /**\n   * Min length for the text box\n   */\n  minLength: PropTypes.number,\n  /**\n   * Make the content of the text box fit the container or not\n   */\n  fluidWidth: PropTypes.bool,\n  /**\n   * Placeholder for the text box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Default value once the component is initialized\n   */\n  value: PropTypes.string,\n  /**\n   * Whether the text box has error or not\n   */\n  hasError: PropTypes.bool,\n  /**\n   * Whether the text box is read only or not\n   */\n  readOnly: PropTypes.bool,\n  min: PropTypes.number,\n  max: PropTypes.number,\n  /**\n   * Whether the text box is clearable or not\n   */\n  clearable: PropTypes.bool,\n  /**\n   * Component to be added at the left side of the text box\n   */\n  leftComponent: PropTypes.element,\n  /**\n   * Component to be added at the right side of the text box\n   */\n  rightComponent: PropTypes.element,\n  /**\n   * Whether the text box is required or not\n   */\n  required: PropTypes.bool,\n  /**\n   * [\n   *  'variant-default',\n   *  'variant-focus',\n   *  'variant-active',\n   *  'variant-disabled',\n   * ]\n   */\n  variant: PropTypes.string,\n};\n\nexport default DSTextBox;\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","/* eslint-disable react/no-unused-state */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Search from '@elliemae/ds-icons/Search';\nimport DSButton from '@elliemae/ds-basic/Button';\nimport DSTextBox from '@elliemae/ds-basic/form/TextBox';\nimport withSearchable from './withSearchable';\n\nconst SearchBoxImpl = ({\n  containerProps,\n  placeholder,\n  className,\n  disabled,\n  disableButton,\n  innerRef,\n  showIcon,\n  style,\n  onChange,\n  onKeyUp,\n  onSearch,\n  onBlur,\n  readOnly,\n  value,\n  clearable,\n}) => (\n  <DSTextBox\n    className={className}\n    clearable={clearable}\n    containerProps={containerProps}\n    disabled={disabled}\n    innerRef={innerRef}\n    onChange={onChange}\n    onKeyUp={onKeyUp}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    readOnly={readOnly}\n    rightComponent={\n      showIcon && (\n        <DSButton\n          disabled={disabled || disableButton}\n          buttonType=\"text\"\n          icon={<Search />}\n          iconSize=\"s\"\n          onClick={onSearch}\n        />\n      )\n    }\n    style={style}\n    value={value}\n  />\n);\n\nSearchBoxImpl.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  style: PropTypes.objectOf(PropTypes.string),\n  placeholder: PropTypes.string,\n  onKeyUp: PropTypes.func,\n  onSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  showIcon: PropTypes.bool,\n  disabled: PropTypes.bool,\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  clearable: PropTypes.bool,\n};\n\nexport default withSearchable(SearchBoxImpl);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SearchBoxImpl from './SearchBoxImpl';\n\nconst DSSearchBox = ({\n  containerProps = {},\n  innerRef = undefined,\n  className = '',\n  disabled = false,\n  disableButton = false,\n  searchIcon = 'search',\n  style = {},\n  property = 'all',\n  placeholder = 'Search all', // todo: i18nize this\n  searchOnEnter = true,\n  clearOnSearch = false,\n  onKeyUp = () => null,\n  onSearch = () => null,\n  onChange = () => null,\n  onBlur = () => null,\n  readOnly = false,\n  value = undefined,\n  showIcon = true,\n}) => (\n  <SearchBoxImpl\n    className={className}\n    clearOnSearch={clearOnSearch}\n    containerProps={containerProps}\n    disabled={disabled}\n    disableButton={disableButton}\n    innerRef={innerRef}\n    onKeyUp={onKeyUp}\n    onSearch={onSearch}\n    onChange={onChange}\n    onBlur={onBlur}\n    placeholder={placeholder}\n    property={property}\n    readOnly={readOnly}\n    searchIcon={searchIcon}\n    searchOnEnter={searchOnEnter}\n    showIcon={showIcon}\n    style={style}\n    value={value}\n  />\n);\n\nDSSearchBox.propTypes = {\n  containerProps: PropTypes.shape({}),\n  className: PropTypes.string,\n  innerRef: PropTypes.any,\n  /**\n   * Icon to use in the search button\n   */\n  searchIcon: PropTypes.string,\n  /**\n   * Set style to the search box\n   */\n  style: PropTypes.objectOf(PropTypes.string),\n  property: PropTypes.string,\n  /**\n   * Placeholder for the search box\n   */\n  placeholder: PropTypes.string,\n  /**\n   * Whether to trigger the search once the enter is pressed\n   */\n  searchOnEnter: PropTypes.bool,\n  /**\n   * Whether to clear the input on search\n   */\n  clearOnSearch: PropTypes.bool,\n  /**\n   * Allows a function that is triggered once in the search box a keyboard key is released\n   */\n  onKeyUp: PropTypes.func,\n  /**\n   * Allows a function that is triggered once the search is clicked\n   */\n  onSearch: PropTypes.func,\n  /**\n   * Allows a function that is triggered on change\n   */\n  onChange: PropTypes.func,\n  /**\n   * Function that is triggered on blur\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Selected default active value\n   */\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.object,\n  ]),\n  /**\n   * Whether to show an icon or not\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Disables the search input and button\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Disables the search button\n   */\n  disableButton: PropTypes.bool,\n  readOnly: PropTypes.bool,\n};\n\nexport default DSSearchBox;\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n"],"sourceRoot":""}