{"version":3,"sources":["PageHeader/Toolbars/ThreeButtonsToolbar.js","../../../../src/Toolbar/decorateToolbarChildren.js","../../../../src/Toolbar/DSToolbar.js"],"names":["memo","withDepth","data-testid","labelText","children","extraProps","component","cloneElement","className","ToolbarContainer","alignment","size","DSToolbar","containerProps","innerRef","autoFocusOnMount","otherProps","containerRef","useRef","getContainer","keyBindings","Tab","orientation","classProps","mergeRefs","decorateToolbarChildren","PropTypes"],"mappings":"iGAAA,6CAqBeA,0BAjBa,kBAC1B,kBAAC,IAAD,CAAWC,WAAW,GACpB,kBAAC,IAAD,CACEC,cAAY,8BACZC,UAAU,wBAEZ,kBAAC,IAAD,CACED,cAAY,8BACZC,UAAU,WAEZ,kBAAC,IAAD,CACED,cAAY,0BACZC,UAAU,kB,yoBCdD,SAACC,GAAD,IAAWC,EAAX,iEACb,oBAEE,SAAAC,GAAS,OACPA,EACIC,uBAAaD,EAAW,EAAZ,UAEPA,EAFO,WAGVE,UAAW,GAAF,OAAKF,QAAL,8BALR,IAHE,Q,mICUTG,EAAmB,mBAFzB,UAEyB,MAGvB,kBAAGR,EAAH,YAAcS,EAAd,YAAyBC,EAAzB,iBACE,iBAAkBV,GADpB,6CAOIW,EAAY,SAAC,GASb,QARJC,sBAQI,MARa,GAQb,EAPJC,EAOI,EAPJA,SAOI,IANJb,iBAMI,aALJS,iBAKI,MALQ,QAKR,MAJJK,wBAII,aAHJX,gBAGI,MAHO,GAGP,MAFJO,YAEI,MAFG,SAEH,EADDK,EACC,0GACEC,EAAeC,iBAArB,MACA,OACE,uBACEH,iBADF,EAEEI,aAAc,kBAAMF,EAAN,SACdG,YAAa,CACXC,IAAK,QAEPC,YAAY,cAEZ,wCAGEC,WAAY,CAAEtB,UAAF,EAAaS,UAAb,EAAwBC,QACpCG,SAAUU,YAAUV,EAAUG,KAE7BQ,YAfP,MAqBFb,YAAsB,CACpBC,eAAgBa,UADI,IAGpBzB,UAAWyB,IAHS,KAKpBhB,UAAWgB,UAAgB,CAAC,QALR,SAOpBf,KAAMe,UAAgB,CAAC,SAAjBA,a","file":"static/js/50.709c6436.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport DSToolbar from '@elliemae/ds-basic/Toolbar';\nimport DSButton from '@elliemae/ds-basic/Button';\n\nconst ThreeButtonsToolbar = () => (\n  <DSToolbar withDepth={false}>\n    <DSButton\n      data-testid=\"workflow-rules-toggle-rules\"\n      labelText=\"Activate/Deactivate\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-delete-rules\"\n      labelText=\"Delete\"\n    />\n    <DSButton\n      data-testid=\"workflow-rules-add-rule\"\n      labelText=\"New Rule\"\n    />\n  </DSToolbar>\n);\n\nexport default memo(ThreeButtonsToolbar);\n","import React, { cloneElement } from 'react';\n\nexport default (children, extraProps = {}) =>\n  React.Children.map(\n    children,\n    component =>\n      component\n        ? cloneElement(component, {\n            ...extraProps,\n            ...component.props,\n            className: `${component.props.className} toolbar-item`,\n          })\n        : component,\n    null,\n  );\n","import React, { useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { aggregatedClasses } from '@elliemae/ds-classnames';\nimport FocusGroupProvider from '@elliemae/ds-shared/FocusGroup/FocusGroupManager';\nimport { mergeRefs } from '@elliemae/ds-utilities/system';\nimport decorateToolbarChildren from './decorateToolbarChildren';\nimport Item from './ToolbarItem';\nimport ToolbarGroup from './ToolbarGroup';\nimport Divider from './ToolbarDivider';\n\nconst blockName = 'toolbar';\n\nconst ToolbarContainer = aggregatedClasses('div')(\n  blockName,\n  null,\n  ({ withDepth, alignment, size }) => ({\n    'without-depth': !withDepth,\n    [alignment]: !!alignment,\n    [size]: size,\n  }),\n);\n\nconst DSToolbar = ({\n  containerProps = {},\n  innerRef,\n  withDepth = true,\n  alignment = 'right', // left || right\n  autoFocusOnMount = true,\n  children = [],\n  size = 'normal',\n  ...otherProps\n}) => {\n  const containerRef = useRef(null);\n  return (\n    <FocusGroupProvider\n      autoFocusOnMount={autoFocusOnMount}\n      getContainer={() => containerRef.current}\n      keyBindings={{\n        Tab: 'next',\n      }}\n      orientation=\"horizontal\"\n    >\n      <ToolbarContainer\n        {...containerProps}\n        {...otherProps}\n        classProps={{ withDepth, alignment, size }}\n        innerRef={mergeRefs(innerRef, containerRef)}\n      >\n        {decorateToolbarChildren(children)}\n      </ToolbarContainer>\n    </FocusGroupProvider>\n  );\n};\n\nDSToolbar.propTypes = {\n  containerProps: PropTypes.shape({}),\n  /** Shows a shadow rear the toolbar */\n  withDepth: PropTypes.bool,\n  /** Aligns the toolbar to the left or right */\n  alignment: PropTypes.oneOf(['right', 'left']),\n  /** Toolbar size */\n  size: PropTypes.oneOf(['normal', 'compact']),\n};\n\nexport { Item as ToolbarItem, ToolbarGroup, Divider as ToolbarDivider };\n\nexport default DSToolbar;\n"],"sourceRoot":""}